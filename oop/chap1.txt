
                          chapter 1 : classes and objects 

oop : representing the essential features of the object 

-------------------

data struture : 

A data structure is a way of organizing and storing data in a computer so that it can be accessed and modified efficiently.  

example :
--------- 

array : can stores the multiple values in one variable of differnt data type , and is mutable 

string : stores sequence of char  in dbl quts 

obj , number, etc
------------------------------------------------------------------------


object : key-value pair  //  collection of properties and methods 

// inside the object , key will be a variable as usual but value can be anything -> string , array , number , function or anything 

// object is an composite data struture can store multiple properties ,values and methodes 

-------------------------------------------------------


properties : characterstics or attributes of object 


--------------------------------------------------------------
class : A class defines the structure and behavior of that objects created from it will have.
        // a class can be ceated with constructor method with properties and another any method to log values of object 
----------------------------------------------------------

how do you create new variable inside class , using - this. keyword 

whenever we use new keyword to create an object , the constructor is called 

my__name = new Customer ("" , "" ) -> new (constructor)  Customer (of this class)

object.function_name(); ->  in the class , will make that function called 

console.log(object.info) -> to call info function inside the class , which will return something 


---------------------------------
class is a template or blue print 

object is an instance of a class 
---------------------------------

Class as a Blueprint: A class defines the structure and behavior that objects created from ,it will have. It contains properties (data) and methods (functions) that define what the objects can hold and do. However, a class by itself is just a template and doesn't hold actual data until an object is created.

Object as an Instance: When we create an object from a class, we are making a specific realization (or instance) of that class. The object has its own set of values for the properties defined by the class and can use the methods defined in the class.

-----------------------------------------------------------------------------

methods :  actions / functions that object can perform 

// A method is a function that is defined inside a class and is associated with objects of that class are called mwthods .

// methods are used to define the behaviors or actions that objects can perform.

both properties and methods are defined in the class 




Prototype Chain:

Every JavaScript object has a prototype, which is another object from which it can inherit properties and methods

JavaScript first checks the object itself for required method . If it doesn't find it, it looks at the object's prototype. This process continues up the prototype chain until the property or method is found or the end of the chain is reached (null).

--------------------------------------------------------------

inheritence : inherting the properties of the of the parent 

--------------------------------------------------------------------


encapsulation : having all properties and methodes  / function in one class we call this as encapsulation


// bundling of data and methods in  single unit 
--------------------------------------------------------------------


 Constructor:  

1. In JavaScript, a constructor function is used to create and initialize objects.


2. is used to create multiple objects 


3. constructor : when we crete object for a class we need constructor , which will help to initialize the new values 
             // This is a special method in classes used to initialize the object's properties.


------------------------------------------------------


---- example :

class Car {
    constructor(make, model) {
        this.make = make;                          class : basic struture  // blueprint  // Car 
        this.model = model;
    }

    start() {
        console.log(`${this.make} ${this.model} is starting.`);
    }
}

// Creating an object (instance) of the class 'Car'                 // using that struture to buid our needs 

const myCar = new Car('Toyota', 'Corolla');

myCar.start();                                          // Outputs: Toyota Corolla is starting.


------------------------------------------------------------

// practice qtn  on class :

class Car{
    constructor(color,model){
        this.color = color;
        this.model =model;
    }

    get info(){
        return this.color;
    }

    carDetails() {
        console.log(`this car color ${this.color} is newly introduced to this  model of ${this.model}.`);
    }

}

const my_car = new Car("red","2019");

console.log(my_car.info);                            // red   // get function return 

my_car.carDetails();                        // this car color red is newly introduced to this  model of 2019.
                                                        // function 

-------------------------------------------------


polymorphism : it allows objects to be treated as instances of their parent class

// ability of a single method to peroform different actions based on the object , it is called on 

//example :

person as - student / son / volunteer / bussinessman 

-------------------------------------------------------------------------

class person {
    constructor(name,age) {
        this.name = name;
        this.age =age;

    }


greet() {
    console.log(`hello my name is ${this.name} and my age is ${this.age}`);
}

}

--------------------------------------------------------------------------

// object literal // empty object 

const user = {};

-----------------------

const user = {
    names : [ "alice" ,"bob"],          // name , age, printDetails,greet --> properties of object user // correct
    age : 23,
    printDetails : function () {
        console.log("Details of User");
    },
    greet : function(){                           // printDetail & grade -> methods 
        console.log("greet user")
    }
};

----------------------------------------------

// we can access any properties  and methods of object with ( . ) operator 


const user = {
    names : [ "alice" ,"bob"],             // name , age, printDetails,greet --> properties of object user 
    age : 23,
    printDetails : function () {
        console.log("Details of User");
    },
    greet : function(){                           // printDetail & grade -> methods 
        console.log("greet user")
    }
};

console.log(user.names);         // array of names 
user.greet();                     // greet user 

------------------------------------------------------------------

const user = {
    names : {
        "fname" : "manu",
        "lanme" : medleri",

    },             // name , age, printDetails,greet --> properties of object user 
    age : 23,
    printDetails : function () {
        console.log("Details of User");
    },
    greet : function(){                           // printDetail & grade -> methods 
        console.log("greet user")
    }
};

console.log(user.names.fname);         // manu  

----------------------------------------------------------------

accesing  avlues obj with [ ]                //   usefull for dyanamic names 
--------------------

function logSomething(property){

    console.log(user.property);   1.// vlue will not transform    // error 

    console.log(user[property]);  2.//  user["age"]   // 23 
}

logSomething("age");

---------------------------------------------------------------

//  updating propeties and seting new properties


const user = {
    names : {
        "fname" : "manu",
        "lanme" : "medleri",

    },             // name , age, printDetails,greet --> properties of object user 
    age : 23,
    printDetails : function () {
        console.log("Details of User");
    },
    greet : function(){                           // printDetail & grade -> methods 
        console.log("greet user")
    }
};


// updating the values existing property 

user.names.fname = "alice";      

console.log(user.names.fname);                //  alice 

user["names"]["fname"] = "bob";

console.log(user.names.fname);                //  bob 

user.age = 34;

console.log(user.age);            // 34

-----------------------------------

// adding  or setting new properties 

user.hobbies = ["playing", "music"];       

console.log(user.hobbies);          // ["playing", "music"]

user.farewell = function (){
    console.log("good bye");
}

console.log(user);

user.farewell();

-----------------------------------------------------------------------------------


-----------------------------------------------------


// inheritence 

class student extends person {
    constructor(name,age,grade){      // constructor: involves all objects prpts of cur clss aswell parent cls 
        super(name,age)               // super : is used to call constructor of parent class with its obj prpts
        this.grade = grade;
    }

                                           // method which is not working right now 
    study (){                                              
            console.log(`hello my name is ${this.name} is studying `);
    }
}



// practice qtn  on inheritence  :


class Car{
    constructor(color,model){
        this.color = color;
        this.model =model;
    }

    get info(){
        return this.color;
    }

    carDetails() {
        console.log(`this car color ${this.color} is newly introduced to this  model of ${this.model}.`);
    }

}

class newCar extends Car{                      // Car is subclass of parent  class newCar
    constructor(color,model,price){
        super(color,model);
        this.price = price;
    }

    printPrice(){
        console.log(`${this.model} , car price is ${this.price}`);
    }
}

const my_car = new newCar("blue","2091",7787877);         // this prpts goes to constructor 


my_car.printPrice();                         // 2091 , car price is 7787877

my_car.carDetails();                         // childeren inheriting parent properties 
                            // this car color blue is newly introduced to this  model of 2091