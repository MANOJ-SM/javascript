
// every js object has  some special property  attached with it called prototype

// js engine attaches this special property 

const user = {
    name : "manu",
    city : "sgn",
    printDetails : function(){
        console.log(`i am ${this.name} from ${this.city}`);
    }
}

// array will also have this special property bcoz array is also an object type 

const arr = [ 1,2,3,4];

// arr  --> Array prototype --> object prototype  // arr.__proto__.__proto__  --> Object.prototype -> null 


// user --> __proto__ --> Object.prototype

user.__proto__  ----> Object.prototype  ----> Object.prototype.__proto__ ---> null

                                                                      -->   end chain    <---
     

first  js checks - local - prototype - prototypeof prototype , lter till reacing null 



// js first tries to search for a property in obj if not found then it moves to the prototype 


// const user = {
//    name : "manu",                                           // properties 
//    city : "sgn",
//    printDetails : function(){                                   // method 
//        console.log(`i am ${this.name} from ${this.city}`);     
//    }
// };

// user.printDetails();


// const arr = [ 1,2,3,4];

let myDate = new Date(2024,11,3);

// normal inconsole -> by prototype -> myDate.getFullYear  first search in in obj itself 


// by over shaddowing --> overwrittiing the getFullyear function in prototype 
myDate.getFullYear = function() {
    console.log("new date function added");

}


const user1 = {
   name : "manu",                                           // properties 
   city : "sgn",
   printDetails : function(){                                   // method 
       console.log(`i am ${this.name} from ${this.city}`);
   },
   toString : function(){
    console.log("my string");
   }
};

user1.printDetails();

// inheritence using prototype


const parent = {
    a : 10,
    b : 20,
    sum : function(){
        console.log("sum is : ", this.a + this.b)
    }
}

const child = {
    c : 20,
    b : 30,
    multiply : function(){
        console.log("mul is : ",this.c * this.b )
    }
}

child.__proto__ = parent;  // prortoye of child will become parent ( obj proto) // can access properties of the parent obj 


// prototype chain : a chain obj through where ech pbj inheriites properties and methodes from its prototype 


function Person(name) {
    this.name = name;
}

Person.prototype.greet = function() {
    console.log("Hello, my name is " + this.name);
};

var person1 = new Person("Alice");
var person2 = new Person("Bob");

// What will the following code output when executed?
person1.greet();  // Output: Hello, my name is Alice
person2.greet();  // Output: Hello, my name is Bob


// here person is an object and we are adding a custom function to it , greet() , now the instances created using person object will have the this greet method involved 

// person  = function prototype 

