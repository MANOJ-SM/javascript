
// window is the global object that will be present in the browser 

everytime u r running a file along with the execution context , "this" keyword is also created

this ponits to global object // incase of browser it is window 

1) the value of `this` inside the function is -> 
    global object in node js  and  window object in browser. 

2) this inside a object -> whole obj

3) this inside a class -> instance of class

4) this inside a arrow function -> global object in node js and window object in browser.

5) this inside a constructor function -> instance of class.



--------------------------------------
the value of `this` keyword inside function is a global object but incase of 
"use strict" it is undefined 


"use strict"

function abc(){
    console.log("abc");
    console.log(this);  // global object 
}

abc();                                // abc , undefined 
window.abc();                        // in browser -> window obj is shown 


but when you call the function with any keyword like -> window.this -> then again this value points to global object and logs window object in console 

-------------------------------------

// this inside a object 

const obj = {
   x: 10,
   y : function(){
      console.log(this);
   }
}

obj.y();           // y() is called using obj  -- value of `this` here is whole object (get printed)


the function written inside a obj is also  called method 

-----------------------------------------------------------------

// Function Sharing b/w 1 / 2 objects using call() method 

call() method is used when we to make `this` value points to particular object we want 
// whatever obj that will be present inside call methode this will points to that obj ( function sharing )

apply() is also same but diiff in syntax while calling 

bind() is also same but it returns a value of a called function, which can be stored and log later 

const user = {
   fname : "manoj",
   lname :"medleri",
   printFullname : function (){
         console.log(`my name is ${this.fname} ${this.lname}`);
   }
}

user.printFullname();       

// printfullname  methode is called using user obj hence the this inside method will point to obj 
                    

const user = {
   fname : "manoj",
   lname :"medleri",
   printFullname : function (){
         console.log(`my name is ${this.fname} ${this.lname}`);
   }
}

user.printFullname();       


const user2 = {
    fname : "abhi",
    lname : "alvndi",
}                               


user.printFullname.call(user2);   // abhi alvndi


// there is no printFullname methode in this obj but we can still access it from other object using call by passing object name inside it,   

by this `this` will point to user2 object and perform printFullname function


// Function Sharing b/w many objects 


const user = {
   fname : "manoj",
   lname :"medleri",
   
}

let printFullname = function (color,hobby){
   console.log(`my name is ${this.fname} ${this.lname} & my favcolor is ${color} & hobby is ${hobby}`);
}

printFullname.call(user,"orange","learning");       // 1st parameter is object for which `this` will be pointing 
                                                   // rest parameters are parameters which wewant to pass inside function 

// printfullname  methode is called using user obj hence the this inside method will point to obj 
                    
const user2 = {
   fname : "abhi",
   lname : "alvndi",
}                               



printFullname.call(user2,"red","ytube");     



// call() and apply() method are same 

diff is -> passing rest parameters inside list using [ ]

 printFullname.apply(user2, ["red","ytube"]);     

// call() and apply() and bind() method are same 

diff is -> bind returns the value of a function which need to stored in variable which will act linke function , which we can call any time 


// call 

printFullname.call(user2,"red","ytube");     

// apply

 printFullname.apply(user2, ["red","ytube"]);     

// bind

const printName =printFullname.bind(user,"blue","movies")
printName();

-----------------------------------

// prcts qtn :


Write a JavaScript function createGreeting that:

Takes two parameters: firstName (string) and lastName (string).
Defines an object person with properties firstName and lastName.
Defines a function greet within createGreeting that logs a greeting message using this.firstName and this.lastName.
Uses call, apply, and bind to invoke the greet function with different contexts:
callGreet: Uses call to invoke greet with the person object as context.
applyGreet: Uses apply to invoke greet with the person object and an array of arguments.
bindGreet: Uses bind to create a bound function bindGreet that can be invoked later with the person object.


function createGreeting(fname, lname) {


    // Define person object with firstName and lastName properties
    const person = {
        fname : fname,
        lname : lname,
    }

    // Define greet function within createGreeting
    greet = function(){
        console.log(`${this.fname} ${this.lname} `)
    }
    
    // Use call to invoke greet with person context (callGreet)
    greet.call(person,fname,lname);
    
    // Use apply to invoke greet with person context and array of arguments (applyGreet)
    
    greet.apply(person,[fname,lname]);
    
    // Use bind to create a bound function and assign it to bindGreet
    
    const userName = greet.bind(person,fname,lname)
    
   
    userName();
}

createGreeting("John", "Doe");


// value of `this` in arrow function 

const obj = {
    x :10,
    y : () => {
        console.log(this)               
    }
}

// `this` is pointing to obj which is at global scope and prints the same ( where the obj has been defined )

// in node - > obj will print // in browser -> window will be print 

// another example 

const obj = {
   x :10,
   z : function (){
      const  y = () => {           // interview qtns : on this keyword value in different situation 
       console.log(this);         // value of `this` here is obj ,  here it prints whole obj 
   }  
   y();

   }
}

obj.z();



// 3.example


function createCounter() {

    // Define counterObj with count property
    const counterObj = {
        count : 0
    };

    // Define increment arrow function within createCounter
    
    counterObj.increment = function()  {
        counterObj.count +=1;
        console.log(this.count);                // referenceing to counterObj obj 
    };
    
    // Return the increment function
    return counterObj;
    
}
   const counter = createCounter();
   counter.increment();    // 1
   counter.increment();    // 2


////// ----------------------------------- mosh view of `this` keyword 



this references the object that is executing the current function 

the function  which is part of an object we call it as an method

----------------------------------------------------------------------------------------------------

1. if the function is method in an obj then ,  `this` -> obj 

2. if the function is a regualar function in global scope then , 

`this` -> (window obj in browser , global obj in node )


3. `this` in a constructor function points to the  any objects created using constructer function 


4. a call back function inside an object is an regualar function pointin to global obj 

-----------------------------------------------------------------------------------------------------

// example 1 

const video = {
   a :10,
   play(){
       console.log(this);
   }
}

video.play();                    // video obj in console -> { a: 10, play: [Function: play] }

// example 2

const video = {
   a :10,
   play(){
       console.log(this);
   }
}

video.stop = function(){
    console.log(this);
}   

video.stop();                         // video obj in console along with stop() -> 
                                            { a: 10, play: [Function: play], stop: [Function (anonymous)] }


// example 3 :  if the function is a regualar function in global scope then , 

`this` -> (window obj in browser , global obj in node )



const video = {
   a :10,
   play(){
       console.log(this);
   }
}

function playVideo(){
    console.log(this);   // this.a  --> 10 
}

playVideo();             // `this` pointing to global obj in node and window obj in browser 


----------------------------------


// example 3) : in case of constructer function -> `this` will referncing to the new obj created using constructer 

 In JavaScript, a constructor function is used to create and initialize objects.


// independent constructor function 

function Video(title) {                     // function , this ---> constructor function 
    this.title = title;                   // inside function ;
    console.log(this);
}

// obj creation 

const v = new Video("manu project");                // Video { title: 'manu project' }

const m = new Video("abhi prjct");                  // Video { title: 'abhi prjct' }

-------------------


//      this in call back function 


const video = {
   title : "a",                                  // inside obj , 
   tags : ["1","2","3"],

    showTags(){

      //  console.log(this.tags)                        // ["1","2","3"]

      // this.tags.forEach(function(tag){            
      //    console.log(this.title,tag);                    // undefined  , a / b / c
      // });

      // this.tags.forEach(function(tag){            
      //    console.log(this,tag);               // global obj  , a / b / c     here `this` referencing to gbl obj
      // });                                                          // as call back function is defined globaly 
      
      this.tags.forEach(function(tag){            
         console.log(this.title,tag);                  
      }, this);                              // a 1, a 2,a 3 

      // now by setting the argument `this` at the end for forEach () , the `this` will be pointing to showTags() which reflected in the obj 
      // by this now title can be accessed 

      // this.tags.forEach( val => console.log(val));     // a , b , c 
    }                          

}

video.showTags();
