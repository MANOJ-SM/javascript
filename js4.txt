
// higher order function : function which takes another function as parameter 
// call back function : function which is passed as parameter 


// higher order functions :
1.map 
2.filter 
3.reduce

function x() {                                      // call back function 
    console.log("this is call back function !");
}

function y(x) {              // higher order function 
    x();
}

y(x);


//-------------------------------------------------

//1 map()

map function --  higher Order function which is used to transform the contents of array 

map methode works on arrays  and returns the new array , # immutable 

map() transforms each array ele acc to the given function 

map() methode is used to create new array with trannsformed array s

const arr = [1,2,3,4,5,6];

square of arr -> 1,4,9,16,25,36

function square(x){              // take 
    return x * x;
}

const SquaredArray = arr.map(square);
console.log(SquaredArray);
console.log(arr);


-- double of a arr -> 2,4,6,8,10,12

function double(x){
    return 2 * x;
}

const DoubledArray = arr.map(double);
console.log(DoubledArray);


---- same above can be written 

const DoubledArray = arr.map(function double(x){ return 2 * x; });
console.log(DoubledArray);

----- same above in arrow function 

const DoubledArray = arr.map(x => { return 2 * x });          // input => { 
console.log(DoubledArray);
                                                              take each value (x) of array ata time  

hello = () => {
    return "Hello World!";
  }


const users = [ {                       // array of object 
    fname : "alice",
    lname : "jerry",
},

{
    fname : "bob",
    lname : "gorgy",

}];

// arrow function 

const eachUsers = users.map(user => user.fname);           // each value of array => task 
console.log(eachUsers);                                    // users.map() -> HOF
    
    
//normal function 
                                                           // user => user.fname -> call back function 
const eachUser = users.map(function(user) {
    return user.fname;
});

console.log(eachUser);



// const eachUser = users.map(user => user.fname);           // each value of array => task 
// console.log(eachUser);

//Inside the callback function, user is the parameter that refers to each individual element (object) in the users array.

//When users.map is called, it passes each object (one at a time) from the users array to the callback function. The parameter user is used to refer to the current object being processed.


// 2.filter  -- array methode  # immutable 

filter out the array ele based on sepecific conditions 
will not modify original array insted return new array    

//diff map b/w filter

map methode traverese the arrray and  transforms(changing) each array ele acc to the given function 

while filter traverse the array ,  it checks througth arr ele , if the arr ele req acc to function condition exists then it returns the filtered arr ele 

//example :

const arr = [ 1,2,3,4,5,6,7,8];

// const newarr = arr.filter(function(ele){
//     return ele % 2 == 0;
// });

const newarr = arr.filter(ele => ele %2 ==0 );
console.log(newarr);


// example : filter out students who are having marks > 50

const students = [
    {
        "fname" : "manu",
        "marks" : "89",
    },
    {
        "fname" : "alice",
        "marks" : "45",
    },
    {
        "fname" : "bob",
        "marks" : "77",
    },
    {
        "fname" : "satya",
        "marks" : "90",
    },


]

const Mark50 = students.filter(student => student.marks > 50 );

console.log(Mark50);

--------------------------------------------

// 3.reduce 


// it will give result of array of values in one variable 
// returns operations performed on arr ele in one variable effeciently 

// example : normal sum of array 

// const sum = [1,2,3,4,5,6,7];

// let result = 0;

// for(let i=0; i<sum.length; i++){
//     result = result + sum[i];
// }

// console.log(result);

//---  using reduce methode in normal function 

// const arr = [1,2,3,4,5,6,7];

// const result = arr.reduce(function(acc,cur){
//     acc = acc + cur;
//     return acc;
// } ,0);

// console.log(result);

// ---- using reduce methode in normal function 

// const arr = [1,2,3,4,5,6,7];

// const result = arr.reduce( (acc,cur) => {  return acc = acc + cur } , 0);

// console.log(result);


// example : to print maximum of array ele's 

// iterete through each ele
// set one max ele at 0 index
// compare max one with each other 
// if maximum , make that max ele 

// const arr = [1,2,3,4,5,6,7];

// let max = arr[0];

// for(let i=1; i<arr.length; i++){
//     if(arr[i] > max){
//         max = arr[i];
//     }
// }

// console.log(max);

// normal function 

// const arr = [1,2,3,4,5,6,7];

// const result = arr.reduce((acc,cur) => {
//           if( cur > acc ) {
//             acc = cur ;
//             return acc;
//           }
//  } , 0);

//  console.log(result);

// arrow function 

// const arr = [1,2,3,4,5,6,7];

// const result = arr.reduce( (max,cur) => {           // max = acc 
//     if(cur>max){
//         max = cur;
//         return acc;
//     }
// },0);

// console.log(result);
