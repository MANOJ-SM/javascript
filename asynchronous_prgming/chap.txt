
synchronous prgming :
-------------------------
in regualr prming only one piece of code is executed at a time 

js is single threaded (line by line ) synchronous(sequential) language :

--> it executes one line of code at a time and one by one line 

console.log("hi");
console.log("hello");
comsole.log("bye");


---------------
asynchronous progming : Asynchronous programming is a programming that allows tasks to run concurrently without waiting for other tasks to complete 

asynchronous tasks 
 
1.callback
2.promises
3.async/await


 asynchronous functions : setTimeout , featch ...
---------------------------------------------------

whereever the setTimeout i used it will become  asynchronous task



setTimeout (webAPI) provided by browser:
------------

In JavaScript, setTimeout is a function that allows you to delay the execution of a particular piece of code by a specified amount of time.


1000ms = 1 sec 

setTimeout( "() => {             " inside the doublee qts " whatever is there , it is call back function 
                                                    bcoz it is passed inside another( setTimeout) function 
}",1000);


ex:
------
console.log("manu");

setTimeout( () => {    
    console.log("hello world!");        
},3000);

console.log("manoj");
console.log("manoj");
console.log("manoj");
console.log("manoj");
console.log("manoj");
console.log("manoj");

output:
-------
manu
manoj
manoj
manoj
manoj
manoj
manoj
hello world!                     // after all lines executed  and after 3 seconds 

---------------
Note :

1. in case of multiple setTimeout the least time (delay) will executed one after the other 1000 is executed first and 2000 will execute second after 1000 is completed 

2. in case of same time dealy the one which is written first will be excuted first 

-----------------------------------
Event Loop : 

what happened in the above code is when it sees the callback function with some dely it dosent wait for that and excute it , it just skips it and runs rest of code and later come back to this call back function and execute this 

when event loop sees call back function  with dealy ,the same code will be pushed to the browers  with webApi setTimeout which will have timer in it  executes it and pushes it to the call back queue , and then, when  all the rest of code is executed (empty call stack ) , this code in  "call back queue" is pushed  to call stack , and then it executes with its delay 
---------------------------------------------
Note :
js is synchronous or asynchronous language ?

js is synchronous language but in case of any use of callback , promises or event loops it will behave as asynchronous ;


---------------------------

call back queue : when event loop sees call back function  with dealy ,the same code will be pushed to the browers  with webApi setTimeout which will have timer in it  executes it and pushes it to the call back queue , and then, when  all the rest of code is executed (empty call stack ) , this code in  "call back queue" is pushed to call stack  , and then it executes with its delay .


Micro Task queue (API calls and promises goes inside M T queue):
--------------------

similar to call back queue diiff is ,

when we use the featch API which is also time taking , js will push that featch function to browser and after some time of its dealy its executed and pusshed to micro task queue

this micro Task queue has higher prioprity then call back queue 

so event loops goes or picks code in the M T queue and put in the call stack for execution 


// imp interview qtn 

1. what is event loop or  how it works 
2.what is call back queue or Micro Task queue
3.which items goes into the c b queue or which items goes into the M T queue 
4. set of code line with setTimout and  fetch like functions and ask the output order ( M T queue > C B queue )


// callback :

a function which is passed as an argument to another function 


// normal callback function  : 


function createMessage(name, callback) {
    const message = `hello ${name}`;
    callback(message);                      // invokes the callback function  with the created message
}

function displayMessage(message) {
    console.log(message);
}

// Pass `displayMessage` as a callback to `createMessage`

createMessage('manu', displayMessage);


// result will be seen immediately - hello manu 
-----------------------------------

// here with some time delay , it will not execute properly 

function createMessage(name){
    setTimeout(() => {
        const message = `hello ${name}`;
        return message;
    },3000);
}


function dispayMessage(message){
    console.log(message);
}

const message = createMessage('manu');
dispayMessage(message);


// o/p -> undefined  /  a function is taking time to execute hence any other function will dosent wait for anything as it is synchronous

----------------------------------- 


2) why callback function is used ?

// when i want to call  a function only after my previous  function has completed its execution . then i will use 
callback  function .
---------------------------------


// to executee call back function in case of  time taking functions using callback keyword :

function createMessage(name,callback){            // here callback ==  dispayMessage()

    setTimeout(() => {
        const message = `hello ${name}`;
        callback(message);
    },3000);

}

function displayMessage(message){
    console.log(message);
}

createMessage("manu",displayMessage);      // hello manu / after 3 seconds 


// here in the above the callback is representing  the dispayMessage function. *********

// this is used when  we want to call a function after a certain time period 


1) question arsied :

here , displayMessage ( call back function ) shoud not wait for createMessage function to execute as the this an asynchronous task , then why it is executing properly without giving undefinded value if displayMessage function executes before createMessage ?

// in the above code , when crewe msg is called with display msg as call back function , what happens is js goes to to create msg as create msg is called but it will wait as it sees a setTimeout function with some dealy and executes the code inside setTimeout after particular delay 

// after that msg is created callback function is invoked using callback() keyword this will call the callback function , and then callback function will run 


---------------------------------------------------


// callback hell problem with no time delay 

function first(val){
    return val +1;
}

function second(val){
    return val +2;
}

function third(val){
    return val +3;
}

function doOperation(){
    let result = 0;
    result = first(result);
    result = second(result);
    result = third(result);
    console.log(`result ${result}`);            // result 6 
}

doOperation();


// with time delay 


NOTE : here in this case of syncronyous programming,the output will be NAN as the main function is skipped as it takes time to execute and in syncronyous programming js wont wait for anything 

function first(val){
    setTimeout( () =>{
        return val +1;
    },1000);
    
}


function second(val){
    return val +2;
}


function third(val){
    return val +3;
}


function doOperation(){
    let result = 0;
    result = first(result);
    result =  second(result);
    result  = third(result);
    console.log(result);


}


doOperation();  

// NAN is o/p  -> because first function is taking time to execute and second and third function are executing before first function is done .


-----------------------------------


// with time delay using callback  function 


NOTE : by callback function js starts behaving like asynchronous  programming  , it waits for the first function to complete and then executes the callback  function and so on .



// function first(val,callback){          // first fun is called with one intial value and one callback fun
//     setTimeout( () =>{
//         const result =  val +1;
//         callback(result);        // here result  is passed  to same callback function in which second fun is called 

//     },1000);
    
// }


// function second(val,callback){     // here result is 1st parameter and callback is call function 
//     const result1 =  val +2;
//     callback(result1);             // result1 is passed to callback function 
// }


// function third(val,callback){    //  third fun is called result1 and a call function.
//     const result2 =  val +3;
//     callback(result2);           //  result2 is passed to callback function

// }

// function doOperation(){
//     let result = 0;
//     result = first(result);
//     result =  second(result);
//     result  = third(result);
//     console.log(result);


// }

// doOperation();

function first(val, callback) {
    setTimeout(() => {
        const result = val + 1;
        callback(result); // Call the callback with the updated result
    }, 1000);
}

function second(val, callback) {
    const result = val + 2;
    callback(result); // Call the callback with the updated result
}

function third(val, callback) {
    const result = val + 3;
    callback(result); // Call the callback with the final result
}

function doOperation() {
    let result = 0;

    // Start with first and use callbacks to chain the operations
    first(result, (firstResult) => {
        second(firstResult, (secondResult) => {
            third(secondResult, (finalResult) => {
                console.log(`result is ${finalResult}`); // This should log the correct result
            });
        });
    });
}

doOperation();        // result is 6

------

note :

first(result, (firstResult) => {

in the above , an anonymous function is passed as an callback function , and function returns the reult to callback function , the callback function will pass that result as an argument to the next function in the chain.

function handleFinalResult(finalResult) {
    console.log(`Result is ${finalResult}`); // Log the final result
}

-----------------

// with the help of callback fun we are making sure that , that my callback is executed only after my main function is executed eventhougth  it is taking time to execute. 



------------------------------------------------------------------------

promise - is the promise of code execution in future .

it is the object and  connection blw , producing code and conuming code 

three states of promise 
1.pending
2.fulfilled
3.rejected


Resolving a promise :
means that the promise has successfully completed its task, and its state changes from "pending" to "fulfilled" (or "resolved").


Why Resolve a Promise?
Resolving a promise tells the JavaScript runtime that an asynchronous task has completed successfully. It allows you to handle the result using .then() for further processing, chaining multiple promises, or managing multiple asynchronous operations effectively.

-------------------------------------------------------------------

// producing code 

const promise = new Promise(function(resolve,reject){

    let promiseResult;

    setTimeout(()=>{
        promiseResult = true;
        if(promiseResult){
            resolve("successfull");      
        }
        else{
            reject("unsuccessfull");
        }
    },3000);

   
});

// consuming code 

promise.then( result => console.log(result));
promise.catch( err => console.log(err));



// if code reult will be resolved then , promise.then will be called 
// if code result will be rejected then , promise.catch will be called

// the resolve value will passed as an argument  to the callback function of promise.then ("successfull")
// the reject value will passed as an argument to the callback function of promise.catch  ("unsuccessfull")



/*

1) above arrow function in normal function 

promise.then(function(result) {
    console.log(result);
});


2) once the code of promise is ecxecuted it will be in pending stage at first and then move to resolve or reject phase result.



*/

------------------------------

practice problem 

function simplePromiseDemo(success) {

    return new Promise((Resolve,reject) => {
    
    console.log("Promise is pending...");

    // Simulate a network request with setTimeout

    setTimeout( () => {
            if(success){
                Resolve("Promise fulfilled: Data received!");
            }
            else{
                reject("Promise rejected: Error occurred!");
            }
        },2000);
        
    });
}
    

simplePromiseDemo(true)
    .then( result => console.log(result))
    .catch( err => console.log(err));


/// promise is either fullfilled or rejected / resolved or rejected 

as promise is Asynchronous , it takes time to get the data from server so it is pending state and then it is resolved or rejected 

in the mean time , it excutes other code block that comes after promise code and once finsed all code snippetes it returns to promise code which will be either  resolved or rejected 

-----------------------------------------------------------------------------------------------------

fetch API :


// featch is used for an  api call 
// fetch returns a promise 
// once the promise is resolved then .then  is called 
// .then is used to handle the data returned from the api call
// .catch is used  to handle the error if any occurs during the api call.


this is basically provided by browser to make http request (to server) to get some data from server  


fetch() methode is used to make an api call (rqst)  to server to get some data from server 

(insted of typing url in browser search bar we can use this )

whenver i " fetching a url it returns me the promise object " , it needs to be stored in varibale and consoled 



// fetch problem example 

let promiseObject = fetch("https://dummyjson.com/products/1");

console.log(promiseObject);

promiseObject.then( response => response.json()
                        .then( result => console.log(result)));

// promiseObject.catch( ERRresponse => console.log(ERRresponse));

****** // .then is used twice bcoz, first .then is used to get the response from server and second .then is used to get that response in json format  which is readable 

*****  //  whatever dat we retrive or recive from server will not be in fully formate returns only key nothe not actual values of an object hence , we can use .json() methode to convert data into json formate data 



---------------------------------------------------------------------------------------------

practice problem promise 

function fetchData(success) {
    // Return a Promise
    
    return promise = new Promise((resolve,reject) => {
    
    // Simulate a network request with setTimeout
    
    setTimeout(() => {
        if(success){
            resolve("success");
        }
        else{
            reject("failure");
        }
        
    },2000);
  });
    

}

function processData(success) {
    // Call fetchData
    fetchData(success)
    .then( response =>  { console.log(response);
        
    })
     .catch( err => { console.log(err);
     });
   

}

processData(true);

// processData(false);

--------------------------------------------------------------------


// individual calls not dependent on each other 
// i want to know / console all,  once this all are resolved  
// to use multiple promises -> Promises.all


const firstObject = fetch("https://dummyjson.com/products/1")
                            .then( response => response.json());



const secondObject = fetch("https://dummyjson.com/users/1")
                            .then( response => response.json());



const thirdObject = fetch("https://dummyjson.com/posts/1")
                            .then( response => response.json());


/* we are using fetch with then , bcoz we need to tell js what happens when we 
successfully fetched the data from url            */                 

// here firstObject and all are holding  result of promises that are resolved 



// to  wait and use  all  this promises  thogether // consoling responses                              

Promise.all([firstObject,secondObject,thirdObject])
    .then(responses => {
        for(const response of responses ){
            console.log(response);
        }
    }).catch( err => conosle.log(`failed to fetch ${err}`));      

    // catch will be called if any one of the url fails to fetch the content 


// for accepting if any one of promises is resolved 
----------------------------------------------------------------------------------------

function fetchData1() {
    // Return a Promise that resolves after 1 second

    return  new Promise( resolve  => {
        
        setTimeout(()=>{
            resolve("data from fetchData1");
        }, 1000);
    });
}


function fetchData2() {
    // Return a Promise that resolves after 2 seconds
    return  new Promise( resolve  => {

        
        setTimeout(()=>{
            resolve("data from fetchData2");
        }, 2000);
});
}

function fetchData3() {
    // Return a Promise that resolves after 3 seconds
    return  new Promise( resolve  => {
        
        setTimeout(()=>{
            resolve("data from fetchData3");
        }, 3000);
});

}

function fetchAllData() {
    // Use Promise.all() to execute all fetchData functions concurrently

    Promise.all([fetchData1(),fetchData2(),fetchData3()])
        .then (results => {
            console.log(results);
        
        })
    
        .catch(err => {
        console.log(`failed to fetch ${err}`);
        })

 }

fetchAllData();

-----------------------------------------------

[
  'data from fetchData1',
  'data from fetchData2',
  'data from fetchData3'
]
                            
 -----------------------------------------

 // problem on Promise.any                            

 function fetchData1() {
    // Return a Promise that rejects after 1 second
    return new Promise( resolve => {
        setTimeout(function() {
            resolve("Error from fetchData1")
        }, 1000);
    })
}

function fetchData2() {
    // Return a Promise that rejects after 2 second
    return new Promise( resolve => {
        setTimeout(function() {
            resolve("Data from fetchData2")
        }, 2000);
    })
}


function fetchData3() {
    // Return a Promise that rejects after 3 second
    return new Promise( resolve => {
        setTimeout(function() {
            resolve("Data from fetchData3")
        }, 3000);
    })
}

function fetchAnyData() {
    // Use Promise.any() to execute all fetchData functions concurrently

    Promise.any([fetchData1(),fetchData2(),fetchData3()])
    .then( result => {
       console.log(result);
})
    .catch( err => {
    console.log ( `failed to load ${err}`);
})
}

fetchAnyData();

---------------------------
o/p ->

Data from fetchData2

---------------------------------------------------------------------



function fetchData(){
    fetch("https://dummyjson.com/products/1")
    .then(response => response.json())
    .then( result => console.log(result));
}

fetchData();

// chaining of promise -> fetch is giving a promise then response .json() is giving a promise then result is giving a promise


----------------------------------------------

Async / Await 

// async and await is used to handle the promise in a synchronous way.

-> makes code look like  synchronous code but still asynchronous in nature

----------------------------------

normal function with asynchronous task 
--------------------------------------

simple function that return promise in chaining process 

function fetchData(){
    fetch(" https://dummyjson.com/products/1")
    .then(response => response.json())
    .then(result => console.log(result));
}

fetchData();

------------------------
error handling in normal  function with asynchronous task :

using .catch () method to handle the error

--------------------------------------------------------------------------------------------

async function with asynchronous  task 
---------------------------------------

async function feactDataResponse(){
       const response = await fetch(" https://dummyjson.com/products/1");
       const result = await response.json();
       console.log(result);
}

-----------------------------------------

error  handling in async function with asynchronous task :
----------------------------------------------------------

async function feactDataResponse(){

    try {
        const response = await fetch(" https://dummyjson.com/products/1");
       const result = await respose.json();
       console.log(result);
    } catch( error){
        console.log(error);
    }
}

feactDataResponse();

----------------------------------------------------------

own solved practice problem after  understanding the concept of async/await and error handling in async function with asynchronous task :


function fetchUserData(){

    return new Promise((resolve,reject) => {

        setTimeout(() =>{
            if(object1){
                resolve(object1);
            }else
                reject("failed to featch user data ");
        },2000)
    });
}

async function getUserData(object1){
     
    try{
        const result = await fetchUserData(object1);
        console.log(result);
    }catch( error){
        console.log(error);
    }

}

const object1 = {id : 1,   name : "John"};

getUserData(object1);            // {id : 1,   name : "John"};

------------------------------------------------------------------------------------------------------------



1. Callback Functions

A callback function is a function passed as an argument to another function and is executed after some operation is completed.

How It Works:

You manually define what happens after an asynchronous task finishes by passing a function (the callback).
It is often used for handling asynchronous operations like timeouts, events, or I/O.

Example:

function fetchData(callback) {
    setTimeout(() => {
        callback("Data fetched!");
    }, 1000);
}

fetchData(data => console.log(data)); // "Data fetched!" after 1 second

Problems with Callbacks:

Callback Hell: Nesting multiple asynchronous operations becomes hard to read and maintain.
Error Handling: Managing errors in deeply nested callbacks is cumbersome.

------------------


2. Promises
A Promise is an object representing the eventual completion (or failure) of an asynchronous operation. Promises simplify chaining multiple asynchronous tasks and improve readability.

How It Works:

A Promise has three states: pending, fulfilled, or rejected.
.then() is used for chaining after the Promise resolves.
.catch() is used for error handling.

Example:

function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Data fetched!");
        }, 1000);
    });
}

fetchData()
    .then(data => console.log(data)) // "Data fetched!" after 1 second
    .catch(error => console.error(error));

Advantages over Callbacks:

Chaining: Promises allow you to chain .then() calls, avoiding callback hell.
Error Handling: Errors can propagate through .catch().

---------------

3. fetch
fetch is a built-in JavaScript API used for making HTTP requests. It returns a Promise, making it a more modern and convenient way to handle network requests compared to older approaches like XMLHttpRequest.

How It Works:

The fetch function sends an HTTP request and returns a Promise.
The Promise resolves with a Response object that contains the result of the request.
.then() is used to parse and handle the response.

Example:

fetch("https://dummyjson.com/products/1")
    .then(response => response.json()) // Parse JSON from the response
    .then(data => console.log(data)) // Log the data
    .catch(error => console.error(error)); // Handle errors

Key Features of fetch:

Built-in and Modern: No need for external libraries.
Promise-based: Works seamlessly with .then() and .catch().