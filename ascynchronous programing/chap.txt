

in regualr prming only one piece of code is executed at a time 

js is single threaded synchronous language :

--> it executes one line of code at a time and one by one line 

console.log("hi");
console.log("hello");
comsole.log("bye");


---------------
asynchronous progming : Asynchronous programming is a programming that allows tasks to run concurrently without waiting for other tasks to complete 


setTimeout (webAPI) provided by browser:
------------

setTimeout is the webAPi which allows to execute some pieceof code after some delay 

1000ms = 1 sec 

setTimeout( "() => {             " inside the doublee qts " whatever is there , it is call back function 
                                                    bcoz it is passed inside another( setTimeout) function 
}",1000);


ex:
------
console.log("manu");

setTimeout( () => {    
    console.log("hello world!");        
},1000);

console.log("manoj");
console.log("manoj");
console.log("manoj");
console.log("manoj");
console.log("manoj");
console.log("manoj");

output:
-------
manu
manoj
manoj
manoj
manoj
manoj
manoj
hello world!

---------------

what happened in the above cose is when it sees the callback function with some dely it dosent wait for that and excute it , it just skips it and runs rest of code and later come back to this call back function and execute this 

when event loop sees call back function  with dealy ,the same code will be pushed to the browers  with webApi setTimeout which will have timer in it  executes it and pushes it to the call back queue , and then, when  all the rest of code is executed (empty call stack ) , this code in call back queue is pushed  to call stack , and then it executes with its delay 
---------------------------------------------
Note :
js is synchronous or asynchronous language ?

js is synchronous language but in case of any use of callback , promises or event loops it will behave as asynchronous ;


---------------------------

event loop will keep track of each code line that is getting executed one by one in call stack and when all the code pieces get executed after one another and then after , and globall execution context  is also poped out , and call stack is empty 

then this event loop will look for call back queue ( which consist of call back functions with delays)
and now whatever code is in call back queue woill be pushed to call stack , and then that code will be executed 

