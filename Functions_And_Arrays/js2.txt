
// core concepts 

// length  of strings starts from 1 
// array starts from 0 
//strings starts from 0 



whenever we declere a variable or an function , 1st the memory will be allocated to each and then after the exection of particular code takes place

1st phase : memeroy allocation , 2nd phase : code execution ;

once all the variable , function mmry allocation is done , the execution phase start from again  from first line if the variable space is allocated now its value wiil be assigend .

//  variable hoisting 

using var let you able to access variable before it  is declred 

decalration are moved on top / hoisted on top of the block and intiallized with undefined , as memory allocation is done before code execution 

conole.log(a);  // ** it will not throw error  ** it shows undefined (bcoz mmry is alrdy allocated 1st phase )

var a;                   /// imaginary :  variable decalration moved to top     

conole.log(a);   // undefind 

var a = 9;                          //  variable decaration 

// function hoisting


greeting();                          // will print hello 

function decalration 
--------------------

function greeting() {
    console.log( "hello" );             
}

function expression / arrow function       // will be assigning a complete function to an variable  
-----------------------------------

let greeting = () => {
    console.log( "hello" );                      // will throw error            

}


// let and const hoisting 

in sorces when inspection is opened u can see the code exection line by line 

any varibale declred using var is declred in window object  

the separete mmry is allocated for let const apart from var varibales 

console.log(a);   // ReferenceError: Cannot access 'b' before initialization

let a =100
const b = 20;

console.log(b);   // 20 

variables are allocated with mmry but cannont be accessed until value is intialized 

let and const will stay in temporal dead zone unil the value is intailized 

the variable declred using let and const will be allocated with mmry but cant be accessed until the value is initailaized  is called   "let and const temporal dead zone" 

// let and const variables are declred in script declartions sepretely 

// were in var , the variable got undefined value before initalization as it will be declered in global decaration 



// -- default parameter 


es6 feature has introduced this concept that if values are not given then take default values and if values are given ignore default values 

function sum( a=10, b=10) {            // default values 
    return a + b;
}


const result = sum( );     // 20       

const result = sum(2,3);   // 5

const result = sum(3);      // 13 

console.log(result);           




// rest parameters 

there will be many argument value hence they all are captured in one variable and used in as parameter value

all the parameter values are collected in one variable 

// apart from specified , rest of the parameter values are collected in one variable 


function sumOfAllNum(...args){     //  ...  3 dots 
    let sum = 0;                   // when there are multiple argument val's are there then they are difficult to 
    for(let value of args){           to pass as parameters , in that rest parameters are used 
        sum = sum + value;
    }
    return sum;
}

let resultSumOfAllNum = sumOfAllNum( 1,2,3,4,5 );

console.log(resultSumOfAllNum);


--------------------------------------------------


function sumOfAllNum(a , b...args){              
     
     console.log("a",a);
     let sum = 0;
     for(let value of args){
        sum = sum + value;
     }
    return sum;
}


let resultSumOfAllNum = sumOfAllNum( 1,2,3,4,5 );   // a =1 , b = 2 , and rest will be assigned to args and only are proceesd in for of loop ;

console.log(resultSumOfAllNum);



if u dont want some index values in array not be run 

** used when u want  function to work dynamically when  values are manupulated  later


// -- spread syntax 

(...) -> spread operator                // array elements  in one argument val

can pass array values as arguments  


function sum( a, b) {          
    return a + b;
}

const array = [1,2];

let reult = sum(...array);    // it spreads array elements into individual arguments


console.log(result);                                     // 3 


// apart from specified , rest of the parameter values are collected in one variable 

 // it spreads array elements into individual arguments




// strings 

1. string.length 
2. string.replace and replaceAll
3. string.split(" ") or split(" , ");
4. string.trim()  / trimStart() / trimEnd();                // for extra wide spaces rempval from start and end.
5. string.conact 
6. string.charAt  - not used / at - used / charCodeAt -> gives asciee value of char     // to get the character at that index 
7. string.slice                          // (-4 , 6)
8. string.substring  - is not used       // (4 , 6 )



myname = "manoj s m" 

console.log(myname.length);   // 9        // spaces are included 

fullName = " myname is \"manoj\" and i am from shiggoan "       \\ escape   -> \"   \" 

or 

fullName = 'my name is "manoj" and i am from shiggaon'

console.log(fullName);          //  myname is "manoj" and i am from shiggoan 

-----------

// --  strings shouldn't be declred as objects 

let myname = new string("manoj");

-----------

// --  strings are immutable -- means orginal string ko kuch nahi hoga 

let string = "manu manu manu";

let str2 = string.replace("manu","manoj");  // replace 1st manu with manoj 

console.log(str2);

let str3 = string.replaceAll("manu","manoj")  // replace all manu with manoj 

console.log(str3);


//  --  String split 

let string ="i am from shiggoan";

let splitString = string.split(" ");

console.log(splitString);            // [ 'i', 'am', 'from', 'shiggoan' ]


let randomText = "manoj , manu, abhi "

let randomTextSplit = randomText.split(",");

console.log(randomTextSplit);



// -- string trim    // extra wide spaces will be removed from beginning and end not in middle 


let trimmedString = string.trim();
 
console.log(trimmedString);

console.log(trimmedString.length)


let trimmedString2 = string.trimStart();

console.log(trimmedString2);


console.log(trimmedString2.length)           // last 4 spaces are still there 



// --  string concate 

let fname = "manu";

let lname = "medleri";

const fullName = fname + lname ;

console.log(fullName);

const fullName2 = fname.concat(lname);

console.log(fullName2);





// to get/extract  the character from string  ---->  charAt , at , charCodeAt  / starts from 0 , reverse from 1


let text = "manoj medleri";

console.log(text.charAt(4));   // j    // cant use negative index 

console.log(text.charCodeAt(4));  // ascii code/value of j --> 106

console.log(text.at(-4));       // l    // can use negative index 


console.log(text[2]);     // n 

text[2] = "y";

console.log(text);            // immutable 



// -- slice of string 


let sliceText = text.slice(0,7);   // manoj m  // last 6 digit e  is ignored 

console.log(sliceText);

let sliceText2 = text.slice(-2);          // ri   // starts from -2 to end 

console.log(sliceText2);


// substring -- similiar to slice but not consider negative (-) values  making them as 0 when used   


let sliceText3 = text.substring(-2);          // manoj medleri  // -2 changed to 0 

console.log(sliceText3);

// substr 

// substr - deprecated  , means it is not used much in js 


let sliceText4 = text.substr(3,4);          // 0 is index and 4 is upto lenth of string where at index begins from / manoj medleri / oj m  
        
console.log(sliceText4);


// to uppercase to lowercase 

let text = "manoj Medleri";

console.log(text.toLowerCase());


------------------------------------------------// let , const and var //-----------------------------------------

ES6 - ecmaScript 2015 // in 2015 a major revison done to javascript where the lot of new features were introduced .  
// all the features introuced in ES6 are known as ES6 features 

Let and const
Arrow functions
Template literals
Default parameters
Promises
Modules
Classes
Destructuring

-----------------------------------

// reference error : if we want to print the let varaiable before initailizing it will be reffrence arror ;

// type error : assignment to const is not allowed. 

1 ) var is global scope variable- you can access it anywere in the program(inside the block / outsiide theblock)

--> let and const are block scope variable , can be accessed inside the block only ;x

2 ) var can be redeclered and reinatialized 

--> const cannont be redeclered  in same scope and need to inatialize immidetely in the same line 
    
    let cannont can be redeclered in the same scope asweell but it it can be reinitiallize later in same scope ;


2 diff blw var / let and const 
------------------------------------------
1. scope.
2. decleartion and initallization of variables 


* const keyword is used for pointing to unique references 
* const should be used for arrays and objects bcoz there values can be manupulated later 


const user = { fname : "manu" , lname : "medleri" }

user.hobby = "motivating";

console.log(user);



// ---------------------------------arrow functions 


// function decleration 

function sum(a,b) {
    return a + b;
}

const result = sum(2,4);
console.log(result);


* function keyword is used and in arrow function keyword is not used and a const keyword is used to declear variable in which function can be stored.



// function expression // arrow function 

// for function always a const keyword is used to declre variable 

const sum = (a,b) => {
    return a + b;
}

const result1 = sum(2,5);
console.log(result1);

---------------------------------------------------------------------



// temallate litreal : you can define ur strings in back quotes ( ` ` )         // ES6

let name = `manu
s
medleri ` ;

// to use any javascrpt variables inside string we use ${ }

const fname ="manu";
const lname = "medleri";

let fullName = ` congrates "${fname} ${lname}" on finishing module 2 of 4th course`;

console.log(fullName);


// logic in string using template litreal and ${ }

let num1 = 10;
let num2 = 48;

let result = `sum of two numbers is ${num1 + num2 }`;

console.log(result);


// using string templates u can interpolite expression ,can use js variables , and can write multiline string 


// test example 
 
let person = {
    firstName: `Ryan`,
    lastName: `Christiani`,
    sayName() {
        return `Hi my name is ${this.firstName} ${this.lastName}`;
    }
};

console.log(person.sayName());             // Hi my name is Ryan Christiani



[ ...array1 , ...array2]  // merging two arrays 

{ ...obj1 , ...obj2 }     // merging 2 objs 