index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <title>Weather Forecast</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gradient-to-r from-blue-400 via-blue-300 to-blue-500 min-h-screen flex items-center justify-center font-poppins">
    <div class="max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-xl">
        <!-- Header -->
        <h1 class="text-3xl font-extrabold text-center text-blue-700 mb-6">
            Weather Forecast Application
        </h1>

        <!-- Search Bar -->
        <div class="flex items-center justify-center gap-4 mb-6">
            <input type="text" id="cityInput" placeholder="Enter City Name"
                class="w-2/3 border border-gray-300 rounded-lg px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-600">
            <button id="searchButton"
                class="bg-blue-600 text-white font-semibold px-6 py-2 rounded-lg shadow-md hover:bg-blue-700 transition-all">
                Search
            </button>
        </div>

        <!-- Dropdown for Recent Cities -->
        <div class="mb-6">
            <label for="recentCities" class="block text-gray-700 font-medium mb-2">Recent Cities:</label>
            <select id="recentCities" class="w-full border border-gray-300 rounded-lg px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-600">
                <option disabled selected>Select a recent city</option>
            </select>
        </div>

        <!-- Weather Details -->
        <div id="weatherContainer" class="hidden bg-blue-100 p-6 rounded-lg shadow-md">
            <h2 id="cityName" class="text-2xl font-bold text-blue-800 text-center mb-4"></h2>
            <div class="flex items-center justify-center flex-col">
                <!-- Weather Icon -->
                <div class="w-24 h-24 flex items-center justify-center bg-gradient-to-r from-blue-300 to-blue-500 rounded-full shadow-lg">
                    <img class="weather-icon w-16 h-16" alt="Weather Condition" />
                </div>
                <div class="text-center mt-4">
                    <p id="temperature" class="text-4xl font-extrabold text-blue-700"></p>
                    <p id="conditions" class="text-lg text-gray-600"></p>
                </div>
            </div>
            <p id="humidity" class="text-gray-700 mt-4 text-center"></p>
            <p id="wind" class="text-gray-700 text-center"></p>
        </div>
        
        <!-- 5-Day Forecast -->
        <div id="forecastContainer" class="hidden mt-8">
            <h3 class="text-lg font-bold text-blue-800 mb-4">5-Day Forecast</h3>
            <div id="forecastCards" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-4">
                <!-- Example card structure -->
                <div class="p-4 bg-white rounded-lg shadow-md flex flex-col items-center">
                    <!-- Weather Icon -->
                    <div class="w-16 h-16 flex items-center justify-center bg-gradient-to-r from-blue-300 to-blue-500 rounded-full shadow-md mb-4">
                        <img class="weather-icon w-10 h-10" alt="Weather Condition" />
                    </div>
                    <p class="font-bold text-lg text-gray-800">26.73°C</p>
                    <p class="text-gray-500">Overcast Clouds</p>
                    <p class="text-sm text-gray-400">01/12/2024</p>
                </div>
            </div>
        </div>
        

    <script src="script.js"></script>
</body>
</html>


script.js

// Constants
const API_KEY = '58d1f06f5a82b2d8b76936dac7e96291'; // OpenWeatherMap API key
const API_URL = 'https://api.openweathermap.org/data/2.5/weather';
const API_FORECAST_URL = 'https://api.openweathermap.org/data/2.5/forecast';

// DOM Elements
const cityInput = document.getElementById('cityInput');
const searchButton = document.getElementById('searchButton');
const weatherContainer = document.getElementById('weatherContainer');
const forecastContainer = document.getElementById('forecastContainer');
const recentCities = document.getElementById('recentCities');
const forecastCards = document.getElementById('forecastCards');
const cityName = document.getElementById('cityName');
const temperature = document.getElementById('temperature');
const conditions = document.getElementById('conditions');
const humidity = document.getElementById('humidity');
const wind = document.getElementById('wind');

// Weather Icon - Ensure it's selected correctly
const weatherIcon = document.querySelector('.weather-icon');

// Event Listeners
searchButton.addEventListener('click', () => {
    const city = cityInput.value.trim();
    if (city) {
        fetchWeather(city);
        updateRecentCities(city);
    } else {
        alert('Please enter a city name.');
    }
});

recentCities.addEventListener('change', (event) => {
    const city = event.target.value;
    if (city) fetchWeather(city);
});

// Fetch Weather Data
function fetchWeather(city) {
    const url = `${API_URL}?q=${city}&appid=${API_KEY}&units=metric`;
    const forecastUrl = `${API_FORECAST_URL}?q=${city}&appid=${API_KEY}&units=metric`;

    // Fetch Current Weather
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('City not found!');
            }
            return response.json();
        })
        .then(data => displayWeather(data))
        .catch(error => {
            console.error('Error fetching weather:', error);
            alert('City not found! Please check the name and try again.');
        });

    // Fetch Forecast
    fetch(forecastUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error('Forecast data not available!');
            }
            return response.json();
        })
        .then(data => displayForecast(data.list))
        .catch(error => console.error('Error fetching forecast:', error));
}

// Display Current Weather
function displayWeather(data) {
    weatherContainer.classList.remove('hidden');
    cityName.textContent = data.name;
    temperature.textContent = `${data.main.temp}°C`;
    conditions.textContent = data.weather[0].description;
    weatherIcon.src = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;
    humidity.textContent = `Humidity: ${data.main.humidity}%`;
    wind.textContent = `Wind Speed: ${data.wind.speed} m/s`;
}

// Display 5-Day Forecast
function displayForecast(forecastData) {
    forecastContainer.classList.remove('hidden');
    forecastCards.innerHTML = ''; // Clear previous forecast

    // Filter data for one forecast per day (3-hour intervals => 8 per day)
    const filteredData = forecastData.filter((_, index) => index % 8 === 0);

    filteredData.forEach(day => {
        const date = new Date(day.dt_txt).toLocaleDateString();
        const card = `
            <div class="p-4 bg-blue-100 rounded-md shadow">
                <p class="font-bold">${date}</p>
                <img src="http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png" alt="Weather Icon" class="mx-auto">
                <p>${day.main.temp}°C</p>
                <p>${day.weather[0].description}</p>
            </div>
        `;
        forecastCards.innerHTML += card;
    });
}

// Update Recent Cities
function updateRecentCities(city) {
    if (![...recentCities.options].some(option => option.value === city)) {
        const option = new Option(city, city);
        recentCities.add(option);
    }
}
